#include "ScriptPCH.h"#include "test.h"#include "ScriptedCreature.h"#include "Spell.h"/*enum text{	SAY_AGRO	=1,	SAY_KILL	=2,	SAY_DEATH	=3}*//*enum spells{	SPELL_ZERMALMEN	=48224,	SPELL_DONNERKNALL	=63757,	SPELL_VERROTTEN	=59300}enum events{	EVENT_VERROTTEN,	EVENT_DONNERKNALL,	EVENT_ZERMALMEN}*//*class test : public CreatureScript{		public: 				test() :CreatureScript("test")				{				}						struct testAI : public BossAI								{									testAI(Creature * creature) : BossAI(creature)									{									instanze = creature->GetInstanceScript();									} 																		void Reset()										{											events.Reset(); 										}																				void KilledUnit (Unit * who)										{											Talk (SAY_KILL);										}																				void EnterCombat(Unit* who)										{											DoZoneInCombat();											Talk(SAY_AGRO);											events.ScheduleEvent(EVENT_VERROTTEN, 60000);											events.ScheduleEvent(EVENT_DONNERKNALL, 75500);											events.ScheduleEvent(EVENT_ZERMALMEN, 85000);										}																				void UpdateAI()										{											if (me->HasUnitState(UNIT_STATE_CASTING))												return;																								while (uint32 eventId = events.ExecuteEvent())												{													switch (eventId)													{													case EVENT_DONNERKNALL:														DoCast(me, SPELL_DONNERKNALL)														events.ScheduleEvent(EVENT_DONNERKNALL, 75500);														break;													case EVENT_ZERMALMEN:														if (Unit* pTarget = SelectTarget(SELECT_TARGET_RANDOM))															{																DoCast(pTarget, SPELL_ZERMALMEN)															}														events.ScheduleEvent(EVENT_ZERMALMEN, 85000);														break;													case EVENT_VERROTTEN:														if (Unit* pTarget = SelectTarget(SELECT_TARGET_RANDOM))															{																DoCast(pTarget, SPELL_VERROTTEN)															}														events.ScheduleEvent(EVENT_ZERMALMEN,75500);														break;													default:														break;													}												}										}									private:									EventMap events;													InstanceScript * instanze;								};					CreatureAI* GetAI(Creature* creature) const					{						return new testAI(creature);					}};*/void AddSC_test(){	//new test();}